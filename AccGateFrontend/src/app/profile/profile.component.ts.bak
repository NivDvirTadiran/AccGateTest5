import { Component, OnInit } from '@angular/core';
import { TokenStorageService } from '../_services/token-storage.service';
import {Router} from "@angular/router";
import {AuthService} from "../_services/auth.service";
import {AuthInterceptor, authInterceptorProviders} from "../_helpers/auth.interceptor";
import {catchError, switchMap} from "rxjs/operators";
import {BehaviorSubject, pipe, throwError} from "rxjs";
import {HTTP_INTERCEPTORS} from "@angular/common/http";
import { AppConfig } from "../app.config"



@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent implements OnInit {
  currentUser: any;
  accessToken: any;
  refreshToken: any;
  windowObjectReference: any;
  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);
  private isRefreshing = false;
  public appConfig: any;
  private TOKEN_KEY: string;


  constructor(private token: TokenStorageService, private router: Router, private authService: AuthService) {
    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;
  }

  ngOnInit(): void {
    this.currentUser = this.token.getUser();
    this.accessToken = this.currentUser.accessToken;
    this.refreshToken = this.currentUser.refreshToken;
  }


  openapp(): void {
    console.log('window.location.origin.toString():  '+window.location.origin.toString());

    this.router.navigate([]).then(result => { this.windowObjectReference = window.open("https://localhost:8445/accGCCS/"/*window.location.origin.toString()+"/profile"*/); });
    //console.log('window.location.origin.toString():  '+ this.windowObjectReference
    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById("profile_title").innerHTML);
    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById("profile_title").innerHTML = "new title";});


    //this.windowObjectReference.window.document.getElementById("profile_title").innerHTML = "new title";
    //this.windowObjectReference.window.document.done.
    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById("profile_title").innerHTML);
    //let { username, password } = this.loginForm.value;
    //username = this.loginForm.get(['username'])?.value.toString();
    //let password = this.loginForm.get(['password'])?.value.toString();
    //this.authenticationService.logout();
  }

  public forseRefreshToken(): void {
    //@Value("${bezkoder.app.jwtExpirationMs}")

    if (!this.isRefreshing) {
      const token = this.token.getRefreshToken();
      if (token)
        this.authService.refreshToken(token).subscribe(
          data => {
            this.isRefreshing = false;
            this.token.saveToken(data.accessToken);
            this.token.saveRefreshToken(data.refreshToken);
            this.refreshTokenSubject.next(data.accessToken);
            this.currentUser = this.token.getUser();
            this.accessToken = this.token.getToken();
            this.refreshToken = this.token.getRefreshToken();
          },
          (err) => {
            this.isRefreshing = false;

            this.token.signOut();
            return throwError(err);
          }
        );


    }
  }

  public openNewTabForApp(): void {
    var newAccessToken = "";
    var newRefreshToken = "";
    var newCurrentUser = "";

    if (!this.isRefreshing) {
      const token = this.token.getRefreshToken();
      if (token)
        this.authService.webapptab(token, "GCCS")
          .then(
          data => {
            this.isRefreshing = false;
            newAccessToken = (data.accessToken);
            newRefreshToken = (data.refreshToken);
            newCurrentUser = (data);
          },
          (reject) => {return throwError(reject.error);})
        .then(() => {this.router.navigate([])
        .then(result => { this.windowObjectReference = window.open("https://localhost:8445/accGCCS/");})
        .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);
                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);
                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},
             (err) => { this.isRefreshing = false;
                        return throwError(err);})});

    }
  }

  /*
  forseRefreshToken(): void {
    console.log('Sending forseRefreshToken request...   ');
    this.authInterceptor.forseRefreshToken();
    //authInterceptorProviders.
  }*/
}
