{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/_services/user.service.ts","webpack:///src/app/_shared/event-bus.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.config.ts","webpack:///src/app/app.module.ts","webpack:///src/app/board-admin/board-admin.component.html","webpack:///src/app/board-admin/board-admin.component.ts","webpack:///src/app/board-moderator/board-moderator.component.ts","webpack:///src/app/board-moderator/board-moderator.component.html","webpack:///src/app/board-user/board-user.component.ts","webpack:///src/app/board-user/board-user.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/button2/button2.component.ts","webpack:///src/app/login/button3/button3.component.ts","webpack:///src/app/login/button3/button3.component.html","webpack:///src/app/login/button/button.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/register-form/register-form.component.html","webpack:///src/app/login/register-form/register-form.component.ts","webpack:///src/app/login/replace-pass-form/replace-pass-form.component.html","webpack:///src/app/login/replace-pass-form/replace-pass-form.component.ts","webpack:///src/app/page/language-icon/language-icon.component.ts","webpack:///src/app/page/language-icon/language-icon.component.html","webpack:///src/app/page/page.component.ts","webpack:///src/app/page/page.component.html","webpack:///src/app/pipes/api-error-message.pipe.ts","webpack:///src/app/pipes/login-error-message.pipe.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","TOKEN_HEADER_KEY","AuthInterceptor","tokenService","authService","isRefreshing","refreshTokenSubject","BehaviorSubject","next","authReq","token","getToken","addTokenHeader","handle","pipe","catchError","error","HttpErrorResponse","url","includes","status","handle401Error","throwError","request","getRefreshToken","refreshToken","switchMap","saveToken","accessToken","saveRefreshToken","err","signOut","filter","take","clone","headers","set","subscribe","data","authInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi","AUTH_API","AppConfig","httpOptions","HttpHeaders","AuthService","http","username","password","post","email","phone","responseType","oldPassword","confirmPassword","roles","webapp","webApp","toPromise","TOKEN_KEY","REFRESHTOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","removeItem","setItem","user","getUser","saveUser","getItem","JSON","stringify","parse","API_URL","UserService","get","EventBusService","subject$","Subject","event","eventName","action","name","map","routes","path","component","HomeComponent","LoginComponent","RegisterComponent","ProfileComponent","BoardUserComponent","BoardModeratorComponent","BoardAdminComponent","redirectTo","pathMatch","loadChildren","m","AppModule","AppRoutingModule","RouterModule","useHash","AppComponent","tokenStorageService","eventBusService","isLoggedIn","showAdminBoard","showModeratorBoard","eventBusSub","on","logout","unsubscribe","parsedUrl","URL","location","href","hostname","port","protocol","APP_CONFIG","InjectionToken","accServer","ACCWEBServers","endpoints","BrowserModule","FormsModule","HttpClientModule","NgbDatepickerModule","MdbAccordionModule","MdbCarouselModule","MdbCheckboxModule","MdbCollapseModule","MdbDropdownModule","MdbFormsModule","MdbModalModule","MdbPopoverModule","MdbRadioModule","MdbRangeModule","MdbRippleModule","MdbScrollspyModule","MdbTabsModule","MdbTooltipModule","BrowserAnimationsModule","ReactiveFormsModule","ModalModule","ButtonsModule","MDBBootstrapModule","RegisterFormComponent","ReplacePassFormComponent","ApiErrorMessagePipe","LoginErrorMessagePipe","ButtonComponent","Button2Component","Button3Component","LanguageIconComponent","userService","form","isSuccessful","isSignUpFailed","errorMessage","rolesList","getAdminBoard","content","message","push","register","console","log","getModeratorBoard","onLogin","EventEmitter","onLogout","onCreateAccount","getUserBoard","ACC_VERSION","getPublicContent","getAccVersion","primary","size","label","onClick","mode","tokenStorage","router","registerFormService","replacePassFormService","registerFormRef","replacePassFormRef","isLoginFailed","loginErrorMessage","openRegisterForm","val","undefined","openReplacePassword","open","onClose","login","reloadPage","navigate","reload","test","modalRef","submitted","empList","apiResponse","errorFieldSubmitted","closeResult","validationForm","FormGroup","userName","FormControl","Validators","RegExp","value","registerForm","errorResponse","close","replacePassForm","Page2Component","dataToArray","split","item","trim","join","currentUser","origin","toString","result","windowObjectReference","document","getElementById","innerHTML","promise","reject","webappURLPrefix","newAccessToken","newRefreshToken","newCurrentUser","webapptab","environment","production","enableProdMode","platformBrowser","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\n\r\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  constructor(private tokenService: TokenStorageService, private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.tokenService.getToken();\r\n    if (token != null) {\r\n      authReq = this.addTokenHeader(req, token);\r\n      // for Spring Boot back-end\r\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n\r\n      // for Node.js Express back-end\r\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\r\n    }\r\n    return next.handle(authReq).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\r\n        return this.handle401Error(authReq, next);\r\n      }\r\n      return throwError(error);\r\n    }));\r\n  }\r\n\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      const token = this.tokenService.getRefreshToken();\r\n      if (token)\r\n        return this.authService.refreshToken(token).pipe(\r\n          switchMap((token: any) => {\r\n            this.isRefreshing = false;\r\n            this.tokenService.saveToken(token.accessToken);\r\n            this.tokenService.saveRefreshToken(token.refreshToken);\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n\r\n            return next.handle(this.addTokenHeader(request, token.accessToken));\r\n          }),\r\n          catchError((err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.tokenService.signOut();\r\n            return throwError(err);\r\n          })\r\n        );\r\n    }\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* for Spring Boot back-end */\r\n     return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    /* for Node.js Express back-end */\r\n    //return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, token) });\r\n  }\r\n/*\r\n  public forseRefreshToken2() {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(token.accessToken);\r\n          this.refreshTokenSubject.next(token.accessToken);\r\n\r\n          filter(token => token !== null),\r\n            take(1),\r\n            switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        })\r\n      );\r\n  }\r\n*/\r\n  public forseRefreshToken(): void {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).subscribe(\r\n        data => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(data.accessToken);\r\n          this.refreshTokenSubject.next(data.accessToken);\r\n\r\n\r\n        },\r\n        (err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\n\r\nconst AUTH_API = AppConfig.accServer.ACCWEBServers+'/accGate/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      username,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  registerForm(username: string, email: string, password: string, phone: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'register-form', {\r\n      username,\r\n      email,\r\n      password,\r\n      phone,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  replacePassForm(username: string, oldPassword: string, password: string, confirmPassword: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  register(username: string, email: string, password: string, roles: Array<String>): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      roles,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getToken(url: string, username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(url, {\r\n      username,\r\n      email,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  refreshToken(token: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'refreshtoken', {\r\n      refreshToken: token\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  webapptab(token: string, webapp: string): Promise<any>  {\r\n    return this.http.post(AUTH_API + 'webapptab', {\r\n      refreshToken: token,\r\n      webApp: webapp\r\n    }, httpOptions).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESHTOKEN_KEY = 'auth-refreshtoken';\r\nconst USER_KEY = 'user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      this.saveUser({ ...user, accessToken: token });\r\n    }\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveRefreshToken(token: string): void {\r\n    window.sessionStorage.removeItem(REFRESHTOKEN_KEY);\r\n    window.sessionStorage.setItem(REFRESHTOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      user.refreshToken = token;\r\n      this.saveUser(user);\r\n    }\r\n  }\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESHTOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user: any): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    const user = window.sessionStorage.getItem(USER_KEY);\r\n    if (user) {\r\n      return JSON.parse(user);\r\n    }\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\nconst API_URL = AppConfig.accServer.ACCWEBServers+'/accGate/test/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPublicContent(): Observable<any> {\r\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  }\r\n\r\n  getAccVersion(): Observable<any> {\r\n    return this.http.get(API_URL + 'accversion', { responseType: 'text' });\r\n  }\r\n\r\n  getUserBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\r\n  }\r\n\r\n  getModeratorBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  }\r\n\r\n  getAdminBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n  constructor() { }\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { AppRoutingGuard } from './app-routing.guard';\r\nimport  PageComponent  from \"./page/page.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: 'page', component: PageComponent },\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'profile', component: ProfileComponent/*, canActivate: [AppRoutingGuard] */},\r\n  { path: 'user', component: BoardUserComponent },\r\n  { path: 'mod', component: BoardModeratorComponent },\r\n  { path: 'admin', component: BoardAdminComponent },\r\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n  { path: 'home', loadChildren: () => import('./app.module').then(m => m.AppModule),},\r\n  { path: '**', redirectTo: 'home', },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","<div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\r\n    <a href=\"#\" class=\"navbar-brand\">\r\n      <img _ngcontent-c0=\"accGate\" class=\"nav-img\" srcset=\"./assets/images/TadiranTelecom2.webp\"  width=\"56\"\r\n           height=\"56\"><label>accGate</label>\r\n    </a>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/page\" class=\"nav-link\" routerLink=\"page\">Page </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isLoggedIn\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { EventBusService } from './_shared/event-bus.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    //window.location.reload();\r\n  }\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n// parse ful url to ip,port, params\r\nvar parsedUrl = new URL(window.location.href);\r\nvar url = parsedUrl.hostname;\r\nvar port = parsedUrl.port;\r\nvar protocol = parsedUrl.protocol;\r\nconst AUTH_API = protocol + \"//\" + url + \":\" + port;\r\n\r\nexport let APP_CONFIG = new InjectionToken('app.config');\r\nexport const AppConfig = {\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\n\r\nimport { authInterceptorProviders, AuthInterceptor } from './_helpers/auth.interceptor';\r\nimport {NgbDatepickerModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\r\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\r\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\r\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\r\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\r\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\r\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\r\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\r\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\r\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\r\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\r\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\r\nimport { MdbValidationModule, MdbErrorDirective, MdbSuccessDirective } from 'mdb-angular-ui-kit/validation';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MdbInputDirective  } from 'mdb-angular-ui-kit/forms';\r\nimport { ModalModule, TooltipModule, PopoverModule, ButtonsModule, MDBBootstrapModule } from 'angular-bootstrap-md';\r\nimport { RegisterFormComponent } from './login/register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"./login/replace-pass-form/replace-pass-form.component\";\r\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\r\nimport {LoginErrorMessagePipe} from \"./pipes/login-error-message.pipe\";\r\nimport { ButtonComponent } from \"./login/button/button.component\";\r\nimport { Button2Component } from \"./login/button2/button2.component\";\r\nimport  Page2Component  from './page/page.component';\r\n//import  HeaderComponent  from './page/header.component';\r\nimport { Button3Component } from './login/button3/button3.component';\r\nimport { LanguageIconComponent } from './page/language-icon/language-icon.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        HomeComponent,\r\n        ProfileComponent,\r\n        BoardAdminComponent,\r\n        BoardModeratorComponent,\r\n        BoardUserComponent,\r\n        RegisterFormComponent,\r\n        ReplacePassFormComponent,\r\n        ApiErrorMessagePipe,\r\n        LoginErrorMessagePipe,\r\n        ButtonComponent,\r\n        Button2Component,\r\n      Page2Component,\r\n      //  HeaderComponent,\r\n        Button3Component,\r\n      LanguageIconComponent\r\n    ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgbDatepickerModule,\r\n    MdbAccordionModule,\r\n    MdbCarouselModule,\r\n    MdbCheckboxModule,\r\n    MdbCollapseModule,\r\n    MdbDropdownModule,\r\n    MdbFormsModule,\r\n    MdbModalModule,\r\n    MdbPopoverModule,\r\n    MdbRadioModule,\r\n    MdbRangeModule,\r\n    MdbRippleModule,\r\n    MdbScrollspyModule,\r\n    MdbTabsModule,\r\n    MdbTooltipModule,\r\n    //MdbValidationModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    ModalModule,\r\n    ButtonsModule,\r\n    MDBBootstrapModule.forRoot(),\r\n\r\n  ],\r\n  providers: [authInterceptorProviders],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <form\r\n        *ngIf=\"!isSuccessful\"\r\n        name=\"form\"\r\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n        #f=\"ngForm\"\r\n        novalidate\r\n      >\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\"\r\n                 required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"username.errors && f.submitted\">\r\n            <div *ngIf=\"username.errors.required\">Username is required</div>\r\n            <div *ngIf=\"username.errors.minlength\">\r\n              Username must be at least 3 characters\r\n            </div>\r\n            <div *ngIf=\"username.errors.maxlength\">\r\n              Username must be at most 20 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n                 required email #email=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.email\">\r\n              Email must be a valid email address\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n                 required minlength=\"6\" #password=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">\r\n              Password must be at least 6 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"privilege\">Privilege Level</label>\r\n          <select type=\"privilege\" class=\"form-control\" name=\"privilege\" id=\"pet-select\"\r\n                  [(ngModel)]=\"form.roles\" required #roles=\"ngModel\">\r\n            <option value=\"\">--Please choose an option--</option>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"mod\">Moderator</option>\r\n            <option value=\"user\">User</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n        </div>\r\n\r\n        <div class=\"alert alert-warning\" >\r\n          Roles: <br />{{ rolesList.toString() }}\r\n        </div>\r\n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n          Signup failed!<br />{{ errorMessage }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n        Your registration is successful!\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport {AuthService} from \"../_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-board-admin',\r\n  templateUrl: './board-admin.component.html',\r\n  styleUrls: ['./board-admin.component.css']\r\n})\r\nexport class BoardAdminComponent implements OnInit {\r\n  content?: string;\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  rolesList: Array<String> = [];\r\n\r\n  constructor(private userService: UserService, private authService: AuthService) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAdminBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, roles } = this.form;\r\n    this.rolesList.push(roles);\r\n\r\n    this.authService.register(username, email, password, this.rolesList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-board-moderator',\r\n  templateUrl: './board-moderator.component.html',\r\n  styleUrls: ['./board-moderator.component.css']\r\n})\r\nexport class BoardModeratorComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getModeratorBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport { EventBusService } from '../_shared/event-bus.service';\r\nimport { EventData } from '../_shared/event.class';\r\nimport {User} from \"../../stories/User\";\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.css']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n  content?: string;\r\n\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n\r\n  constructor(private userService: UserService/*, private eventBusService: EventBusService*/) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = err.error.message || err.error || err.message;\r\n        /*if (err.status === 403)\r\n          this.eventBusService.emit(new EventData('logout', null));*/\r\n      }\r\n    );\r\n  }\r\n}\r\n","<!--header>\r\n  <div class=\"wrapper\">\r\n    <div>\r\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <path\r\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n            fill=\"#FFF\"\r\n          />\r\n          <path\r\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n            fill=\"#555AB9\"\r\n          />\r\n          <path\r\n            d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n            fill=\"#91BAF8\"\r\n          />\r\n        </g>\r\n      </svg>\r\n      <h1>Acme</h1>\r\n    </div>\r\n    <div>\r\n      <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user }}</b\r\n          >!\r\n          </span>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\" >\r\n        </storybook-button>\r\n      </div>\r\n      <div *ngIf=\"!user\">\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          [primary]=\"true\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</header-->\r\n<div class=\"container\">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <span>content</span>\r\n        <!--span>{{ content }}</span-->\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <embed type=\"text/html\" src=\"https://www.tadirantele.com/\" height=\"300px\" width=\"100%\" >\r\n\r\n  <h2>Iframe - Target for a Link</h2>\r\n.\r\n  <iframe src=\"https://localhost:8445/accRealTime\" sandbox=\"allow-top-navigation-by-user-activation allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n\r\n\r\n\r\n\r\n  <p><a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" target=\"iframe_a\">aeonix</a></p>\r\n  <p><a href=\"https://en.wikipedia.org/wiki/Avocado\" id=\"testid\" target=\"iframe_a\">wikipedia</a></p>\r\n  <p><a href=\"https://172.28.1.130:8445/accRealTime\" target=\"iframe_a\">accRealTime</a></p>\r\n  <p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public ACC_VERSION: string = 'ACC_VERSION';\r\n  content?: string = 'Aeonix | Tadiran Telecom';\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPublicContent().subscribe(\r\n      data => { this.content = data; },\r\n      err => { this.content = JSON.parse(err.error).message; }\r\n    );\r\n    this.userService.getAccVersion().subscribe(\r\n      data => { this.ACC_VERSION = data; },\r\n      err => { this.ACC_VERSION = JSON.parse(err.error).message; }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container \">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <dl>\r\n          <dt><span>{{ content }}</span></dt>\r\n          <dd><span>{{ ACC_VERSION }}</span></dd>\r\n        </dl>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <aside>\r\n    <!-- Card -->\r\n    <div class=\"fa-pull-right bg-image card shadow-1-strong card-img\">\r\n      <div class=\"card-body text-white\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the bulk of the\r\n          card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-outline-light\">Button</a>\r\n      </div>\r\n    </div>\r\n    <!-- Card -->\r\n  </aside>\r\n\r\n  <div class=\"alert alert-success  \" role=\"alert\">\r\n    <h4 class=\"alert-heading \">Well done!</h4>\r\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\r\n    <hr>\r\n    <p class=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n  </div>\r\n\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button2',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button2.css'],\r\n})\r\nexport class Button2Component {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'accGateButton2';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button2--primary' : 'storybook-button2--secondary';\r\n\r\n    return ['storybook-button2', `storybook-button2--${this.size}`, mode];\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button3',\r\n  templateUrl: './button3.component.html',\r\n  styleUrls: ['./button3.component.css']\r\n})\r\nexport class Button3Component {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'accGateButton2';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button3--primary' : 'storybook-button3--secondary';\r\n\r\n    return ['storybook-button3', `storybook-button3--${this.size}`, mode];\r\n  }\r\n\r\n\r\n}\r\n","<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\"\r\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  {{ label }}\r\n</button>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  styleUrls: ['./button.component.css'],\r\n  template: ` <button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    {{ label }}\r\n  </button>`\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'accGateButton';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n","<div class=\"col-md-12\">\r\n  <!--p><input type=\"checkbox\" [(ngModel)]=\"login.done\"/>\r\n    {{login.title}}\r\n  </p-->\r\n  <!--storybook-header\r\n    [user]=\"user\"\r\n    (onLogout)=\"doLogout()\"\r\n    (onLogin)=\"doLogin()\"\r\n    (onCreateAccount)=\"doCreateAccount()\"></storybook-header-->\r\n  <div id=\"main-login-card\" class=\"card card-container\">\r\n\r\n    <img id=\"profile-img\" src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\" />\r\n    <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\"\r\n               placeholder=\"ea2\" required #username=\"ngModel\"/>\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"username.errors && f.submitted\">\r\n          Username is required!\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\"\r\n          [(ngModel)]=\"form.password\" placeholder=\"e1996\" required minlength=\"1\" #password=\"ngModel\"/>\r\n        <div\r\n          class=\"alert alert-danger\"\r\n          role=\"alert\"\r\n          *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Password must be at least 1 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary btn-block\">Login</button>\r\n\r\n        <div>\r\n          <a (mouseover)=\"popover.show()\" (mouseleave)=\"popover.hide()\" (click)=\"openReplacePassword()\"\r\n             class=\"form-check-label white-text\"  href=\"#/login\" mdbPopoverTitle=\"Account recovery\" #popover=\"mdbPopover\"\r\n             mdbPopover=\"To help keep your account safe, we will make sure that it’s really you trying to sign in\">\r\n            Forgot password?\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && isLoginFailed\">\r\n          Login failed: {{ loginErrorMessage }}\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n    <storybook-button [primary]=\"true\" ></storybook-button>\r\n    <storybook-button2 size=\"small\" ></storybook-button2>\r\n    <storybook-button3 size=\"large\" ></storybook-button3>\r\n    <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\r\n      Logged in as {{ roles }}.\r\n    </div>\r\n    <mdb-card-footer class=\"form-check-label white-text border-bottom-0\" id=\"tests\">\r\n      <label for=\"tests\" class=\"form-check-label white-text\"\r\n              style=\"margin-bottom: 1px; padding: 1px\">R&D test:\r\n        <a (click)=\"openRegisterForm()\" href=\"#/login\" class=\"green-text font-weight-bold\">RegistrationForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"openReplacePassword()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">ReplacePassForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"test()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">test</a>\r\n      </label>\r\n    </mdb-card-footer>\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {  Router } from '@angular/router';\r\nimport { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\nimport { RegisterFormComponent } from './register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"./replace-pass-form/replace-pass-form.component\";\r\nimport {Observable} from \"rxjs\";\r\nimport {User} from \"./User\";\r\n//import {  Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  registerFormRef: MdbModalRef<RegisterFormComponent> | null = null;\r\n  replacePassFormRef: MdbModalRef<ReplacePassFormComponent> | null = null;\r\n  form: any = {\r\n    username: null, //new FormControl('ea2', Validators.min(2)),\r\n    password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n  };\r\n  public isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n  roles: string[] = [];\r\n\r\n  constructor(private authService: AuthService,\r\n              private tokenStorage: TokenStorageService,\r\n              private router: Router,\r\n              private registerFormService: MdbModalService,\r\n              private replacePassFormService: MdbModalService) { }\r\n\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.tokenStorage.getToken()) {\r\n      this.isLoggedIn = true;\r\n      this.roles = this.tokenStorage.getUser().roles;\r\n    }\r\n  }\r\n\r\n  test() {\r\n    console.log(\"test start\");\r\n    /*this.openRegisterForm().then(() => {\r\n      this.openReplacePassword();\r\n      console.log(\"test end\");});*/\r\n\r\n    this.openRegisterForm().then(\r\n    (val) => {\r\n      console.log(val);\r\n      switch (val) {\r\n        case \"xbutton\":\r\n          break;\r\n        case undefined:\r\n          this.openReplacePassword();\r\n          break;\r\n        default:\r\n\r\n      }\r\n      return 'done2';\r\n    },\r\n      (err) => console.error(err));\r\n  }\r\n\r\n  openRegisterForm() {\r\n    return this.registerFormService.open(RegisterFormComponent).onClose.toPromise();\r\n    /*var promise = new Promise<void>((resolve, reject)  => {\r\n      let newRegisterFormService = this.registerFormService.open(RegisterFormComponent);\r\n      setTimeout(() => {\r\n        console.log(\"Async Work Complete\");\r\n        newRegisterFormService.close();\r\n        resolve();//() => {resolve();}\r\n      }, 5000);\r\n    });\r\n    return promise;*/\r\n  }\r\n\r\n  openReplacePassword() {\r\n    this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, password } = this.form;\r\n\r\n    this.authService.login(username, password).subscribe(\r\n      data => {\r\n        this.tokenStorage.saveToken(data.accessToken);\r\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\r\n        this.tokenStorage.saveUser(data);\r\n\r\n        this.isLoginFailed = false;\r\n        this.isLoggedIn = true;\r\n        this.roles = this.tokenStorage.getUser().roles;\r\n        this.reloadPage();\r\n      },\r\n      err => {\r\n        switch (err.error.message) {\r\n          case \"Error: A registry process should be made!\":\r\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\r\n            //toPromise((data) => {this.openReplacePassword()});\r\n            this.openRegisterForm().then(\r\n              (val) => {\r\n                console.log(val);\r\n                switch (val) {\r\n                  case \"xbutton\":\r\n                    break;\r\n                  case \"Registration Complete\":\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  case undefined:\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  default:\r\n                }\r\n                return 'done2';\r\n              },\r\n              (err) => console.error(err));\r\n              break;\r\n          default:\r\n            this.loginErrorMessage = err.error.message;\r\n        }\r\n\r\n\r\n        this.isLoginFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  reloadPage(): void {\r\n    //window.location.reload();\r\n    this.router.navigate(['/profile']).then(() => {window.location.reload()});\r\n    //var URL = window.location.host+\"/profile\"; //'http://localhost:4200/user';\r\n    ///window.open(URL);\r\n    //this.router.navigate([]).then(result => {  window.open(window.location.toString(), 'user'); });\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REGISTRATION</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <img id=\"profile-img\" src=\"../../../AccGate/assets/images/T.png\"\r\n       class=\"profile-img-card\"  alt=\"\"/>\r\n  <div class=\"text-white rgba-stylish-strong py-5 px-5 z-depth-2\">\r\n\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"validationForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n           class=\"form-control\"  formControlName=\"userName\" required />\r\n    <label class=\"form-label \" for=\"typeText\" >UserName input</label>\r\n    <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n      First name is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n  <br>\r\n\r\n    <!--###################### Email input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"email\" id=\"typeEmail\"\r\n             class=\"form-control\" formControlName=\"email\" required />\r\n      <label mdbLabel class=\"form-label form-white\" for=\"typeEmail\">Email input</label>\r\n      <mdb-error *ngIf=\"email?.invalid && (email?.dirty || email?.touched)\">\r\n        Email is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"email?.valid && (email?.dirty || email?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"1\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">Password input</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n      <!--mdb-error *ngIf=\"email?.errors.length\">  Username must be at least 3 characters</mdb-error-->\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Phone input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"tel\" id=\"typePhone\"\r\n           class=\"form-control\" formControlName=\"phone\" required />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePhone\">Phone number input</label>\r\n    <mdb-error *ngIf=\"phone?.invalid && (phone?.dirty || phone?.touched)\">\r\n      Phone is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"phone?.valid && (phone?.dirty || phone?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n  <!--mdb-form-control>\r\n    <input mdbInput  type=\"text\" class=\"form-control\" id=\"exampleDatepicker\"/>\r\n    <label mdbLabel for=\"exampleDatepicker\" class=\"form-label\">Select a date</label>\r\n    <ngb-datepicker-month [NgbDatepicker]=\"datepicker\"></ngb-datepicker-month>\r\n    <ngb-datepicker #dateSelect></ngb-datepicker>\r\n  </mdb-form-control-->\r\n    <!--div class=\"form-group\">\r\n      <button class=\"btn btn-primary btn-block\">Login</button>\r\n    </div-->\r\n    <!--Grid row-->\r\n    <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center \">\r\n      <!--Grid column-->\r\n      <div class=\"form-group text-center mb-2  col-md-12 \">\r\n        <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light\">Register</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  </div>\r\n\r\n  <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n    Your registration is successful!\r\n  </div>\r\n\r\n\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <!--button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"this.modalRef.close()\">Close</button-->\r\n  </div>\r\n\r\n  <br>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport { AuthService } from '../../_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.css']\r\n})\r\nexport class RegisterFormComponent {\r\n  validationForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<RegisterFormComponent>,\r\n              private authService: AuthService) {\r\n    this.validationForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      email: new FormControl(null, Validators.email),\r\n      password: new FormControl('', Validators.minLength(1)),\r\n      phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, email, password, phone } = this.validationForm.value;\r\n    this.authService.registerForm(userName, email, password, phone).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {console.log(\"Registration Complete\");\r\n                        this.modalRef.close(\"Registration Complete\");}\r\n    );\r\n  }\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('userName')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REPLACE PASSWORD</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn btn-close white-text \" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <figure class=\"figure\">\r\n  <img aria-setsize=\"20\"  id=\"profile-img\" src=\"../../../AccGate/assets/images/T.png\"\r\n       class=\"profile-img-card img-fluid rounded \"  alt=\"\"/>\r\n    <figcaption class=\"figure-caption text-center text-capitalize\">Tadiran Telecom</figcaption>\r\n  </figure>\r\n  <div class=\"text-white rgba-stylish-strong py-4 px-5 z-depth-2\" style=\"border-bottom: 2rem\">\r\n  <!--div class=\"form-outline\">\r\n    <input type=\"text\" id=\"typeText\" class=\"form-control\" />\r\n    <label  class=\"form-label\" for=\"typeText\">Your UserName</label>\r\n  </div-->\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"replacePassForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n             class=\"form-control\"  formControlName=\"userName\" required />\r\n      <label class=\"form-label \" for=\"typeText\" >Username input</label>\r\n      <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n        Username is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n    <br>\r\n  <!--###################### Old Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeOldPassword\"\r\n           class=\"form-control\" formControlName=\"oldPassword\" required minlength=\"1\" />\r\n    <label class=\"form-label\" for=\"typeOldPassword\">Current Password</label>\r\n      <mdb-error *ngIf=\"oldPassword?.invalid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Current password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"oldPassword?.valid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['oldPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['oldPassword'] | loginErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n    <br>\r\n    <hr class=\"my-1 text-black-50\">\r\n    <br>\r\n\r\n  <!--###################### New Password input field ###################### -->\r\n  <div class=\"form-outline text-black-50\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">New Password</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  <br>\r\n\r\n  <!--###################### Confirm Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeConfirmPassword\"\r\n           class=\"form-control\" formControlName=\"confirmPassword\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typeConfirmPassword\">Confirm Password</label>\r\n      <mdb-error *ngIf=\"confirmPassword?.invalid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Retype password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"confirmPassword?.valid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['confirmPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['confirmPassword'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  </form>\r\n  </div>\r\n\r\n\r\n  <!--Grid row-->\r\n  <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center border-bottom-0 \">\r\n    <!--Grid column-->\r\n    <div class=\"text-center mb-2  col-md-12 border-bottom-0\">\r\n      <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light border-bottom-0\"\r\n      style=\"margin-bottom: 0;\">Replace Password</button>\r\n    </div>\r\n  </div>\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"modalRef.close()\">Close</button>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"../../_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form.component.html',\r\n  styleUrls: ['./replace-pass-form.component.css']\r\n})\r\nexport class ReplacePassFormComponent {\r\n  replacePassForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<ReplacePassFormComponent>,\r\n              private authService: AuthService) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      oldPassword: new FormControl(null, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.minLength(3)),\r\n      confirmPassword: new FormControl(null, Validators.minLength(3))\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    this.authService.replacePassForm(userName, oldPassword, password, confirmPassword).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {this.modalRef.close()}\r\n    );\r\n  }\r\n\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('userName')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-language-icon',\r\n  templateUrl: './language-icon.component.html',\r\n  styleUrls: ['./language-icon.component.css']\r\n})\r\nexport class LanguageIconComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'accGateButton2';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-language-icon--primary' : 'storybook-language-icon--secondary';\r\n\r\n    return ['storybook-language-icon', `storybook-language-icon--${this.size}`, mode];\r\n  }\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>language-icon works!</p>\r\n<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\"\r\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  {{ label }}\r\n</button>\r\n","import { Component } from '@angular/core';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-page2',\r\n  templateUrl: './page.component.html',\r\n  styleUrls: ['./page.component.scss']\r\n})\r\nexport default class Page2Component {\r\n  /*user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }*/\r\n}\r\n\r\n","\r\n<html>\r\n<head>\r\n  <style>\r\n\r\n  </style>\r\n</head>\r\n<body>\r\n<div class=\"Frame-1 relative\">\r\n  <div class=\"Desktop-1Login-1\">\r\n\r\n    <img src=\"assets/images/icon-1.webp\" srcset=\"/assets/images/icon-1@2x.webp 2x, /assets/images/icon-1@3x.webp 3x\"\r\n         class=\"icon-1\" alt=\"icon-1\" />\r\n\r\n    <img src=\"assets/images/icon-2.webp\" srcset=\"/assets/images/icon-2@2x.webp 2x, /assets/images/icon-2@3x.webp 3x\"\r\n         class=\"icon-2  \" alt=\"icon-2szd\" />\r\n\r\n\r\n\r\n  </div>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n<!--article>\r\n  <storybook-header\r\n    [user]=\"user\"\r\n    (onLogout)=\"doLogout()\"\r\n    (onLogin)=\"doLogin()\"\r\n    (onCreateAccount)=\"doCreateAccount()\"></storybook-header>\r\n  <section>\r\n  </section>\r\n\r\n</article-->\r\n\r\n\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage'\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"currentUser; else loggedOut\">\r\n  <br>\r\n  <header class=\"background jumbotron\">\r\n    <h3 class=\"font_0\" id=\"profile_title\">\r\n      {{ currentUser.username }} Profile\r\n    </h3>\r\n  </header>\r\n  <p>\r\n    <strong>accessToken:</strong>\r\n    <!--{{ currentUser.accessToken.substring(0, 20) }} ...\r\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}-->\r\n    {{ accessToken }}\r\n  </p>\r\n  <p>\r\n    <strong>refreshToken:</strong>\r\n    {{ refreshToken }}\r\n    <br>\r\n    <button id=\"forseRefreshToken\" (click)=\"forseRefreshToken()\" style='text-align: left; width:auto;cursor: pointer;'>Refresh</button>\r\n    <br>\r\n    <button id=\"openNewGccsTab\" (click)='openNewTabForApp(\"GCCS\",\"/accGCCS/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for GCCS</button>\r\n    <br>\r\n    <button id=\"openNewAgentTab\" (click)='openNewWinForApp(\"AGENT\",\"/accAgent/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for Agent</button>\r\n    <br>\r\n    <button id=\"openNewWebRTTab\" (click)='openNewTabForApp(\"ACCREALTIME\",\"/accRealTime/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for WebRT</button>\r\n  </p>\r\n  <p>\r\n    <strong>Email:</strong>\r\n    {{ currentUser.email }}\r\n  </p>\r\n  <p>\r\n    <strong>ID:</strong>\r\n    {{ currentUser.id }}\r\n  </p>\r\n  <p>\r\n    <strong>Web App:</strong>\r\n    {{ currentUser.webApp }}\r\n  </p>\r\n  <strong>Roles:</strong>\r\n  <ul>\r\n    <li *ngFor=\"let role of currentUser.roles\">\r\n      {{ role }}\r\n    </li>\r\n  </ul>\r\n  <p><a href=\"http://tadiran2014.azurewebsites.net/en/products/unified-communications/aeonix/\" id=\"testid2\" target=\"iframe_a\">Tadiran Azure</a></p>\r\n  <p><a href=\"https://www.tadirantele.com/aeonix4cloud\" id=\"testid4\" target=\"iframe_a\">aeonix4cloud</a></p>\r\n  <iframe src=\"https://www.tadirantele.com/aeonix4cloud\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"550px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n  <ul class=\"list-unstyled\">\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" class=\"app-icon-wide\"  target=\"_blank\" aria-current=\"true\">\r\n        <img class=\"\" src=\"../../AccGate/assets/images/aeonix_logo_72.png\" alt=\"Icon app number 1\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">aeonix - SERVER</h5>\r\n        Aeonix is a software only communications solution that consolidates disparate business applications into a single, fault tolerant platform. The Aeonix Unified Communications platform, Aeonix Contact Center(ACC), and Aeonix Dispatch Console (ADC), all reside in one virtual instance or COTS server. Aeonix runs on any virtualization platform including VMware, Hyper-V and cloud platforms such as AWS, and can easily port from one platform to another.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <button (click)=\"openapp()\" class=\"app-icon\" >\r\n        <img class=\"app-icon\" src=\"../../AccGate/assets/images/dashboard.png\" alt=\"Icon app number 2\" >\r\n      </button>\r\n      <!--a href=\"https://172.28.1.130:8445/accRealTime/index.jsp\" class=\"app-icon\" rel=\"opener\" aria-current=\"true\"></a-->\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://localhost:8445/accGCCS/\" id=\"testid3\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n      <img class=\"app-icon\" src=\"../../AccGate/assets/images/management.png\" alt=\"Icon app number 3\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <a href=\"http://localhost:8080/accWebRT/\" id=\"testid5\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"../../AccGate/assets/images/dashboard.png\" alt=\"Icon app number 4\" >\r\n      </a>\r\n\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccWebRT - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8445/accAgent/\" id=\"testid6\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"../../AccGate/assets/images/management.png\" alt=\"Icon app number 5\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccAgent - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<ng-template #loggedOut>\r\n  Please login.\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthService} from \"../_services/auth.service\";\r\nimport {AuthInterceptor, authInterceptorProviders} from \"../_helpers/auth.interceptor\";\r\nimport {catchError, switchMap} from \"rxjs/operators\";\r\nimport {BehaviorSubject, pipe, throwError} from \"rxjs\";\r\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\r\nimport { AppConfig } from \"../app.config\"\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  currentUser: any;\r\n  accessToken: any;\r\n  refreshToken: any;\r\n  windowObjectReference: any;\r\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  private isRefreshing = false;\r\n  public appConfig: any;\r\n  private TOKEN_KEY: string;\r\n\r\n\r\n  constructor(private token: TokenStorageService, private router: Router, private authService: AuthService) {\r\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.token.getUser();\r\n    this.accessToken = this.currentUser.accessToken;\r\n    this.refreshToken = this.currentUser.refreshToken;\r\n  }\r\n\r\n\r\n  openapp(): void {\r\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\r\n\r\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\r\n    //console.log('window.location.origin.toString():  '+ this.windowObjectReference\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\r\n\r\n\r\n    //this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";\r\n    //this.windowObjectReference.window.document.done.\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    //let { username, password } = this.loginForm.value;\r\n    //username = this.loginForm.get(['username'])?.value.toString();\r\n    //let password = this.loginForm.get(['password'])?.value.toString();\r\n    //this.authenticationService.logout();\r\n  }\r\n\r\n  public forseRefreshToken(): void {\r\n    //@Value(\"${bezkoder.app.jwtExpirationMs}\")\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.refreshToken(token).subscribe(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            this.token.saveToken(data.accessToken);\r\n            this.token.saveRefreshToken(data.refreshToken);\r\n            this.refreshTokenSubject.next(data.accessToken);\r\n            this.currentUser = this.token.getUser();\r\n            this.accessToken = this.token.getToken();\r\n            this.refreshToken = this.token.getRefreshToken();\r\n          },\r\n          (err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.token.signOut();\r\n            return throwError(err);\r\n          }\r\n        );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  public openNewTabForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            newAccessToken = (data.accessToken);\r\n            newRefreshToken = (data.refreshToken);\r\n            newCurrentUser = (data);\r\n          },\r\n          (reject) => {return throwError(reject.error);})\r\n        .then(() => {this.router.navigate([])\r\n        .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix);})\r\n        .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n             (err) => { this.isRefreshing = false;\r\n                        return throwError(err);})});\r\n    }\r\n  }\r\n\r\n\r\n  public openNewWinForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n            data => {\r\n              this.isRefreshing = false;\r\n              newAccessToken = (data.accessToken);\r\n              newRefreshToken = (data.refreshToken);\r\n              newCurrentUser = (data);\r\n            },\r\n            (reject) => {return throwError(reject.error);})\r\n            .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\r\n                        'C-Sharpcorner', 'scrollbars=no');})\r\n            .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n              (err) => { this.isRefreshing = false;\r\n                return throwError(err);})\r\n    }\r\n  }\r\n  /*\r\n  forseRefreshToken(): void {\r\n    console.log('Sending forseRefreshToken request...   ');\r\n    this.authInterceptor.forseRefreshToken();\r\n    //authInterceptorProviders.\r\n  }*/\r\n}\r\n","<div class=\"col-md-12\">\r\n  <div class=\"card card-container\">\r\n    <img\r\n      id=\"profile-img\"\r\n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\"/>\r\n    <form  *ngIf=\"!isSuccessful\"  name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\"  #f=\"ngForm\"  novalidate>\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\"\r\n          required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"username.errors && f.submitted\">\r\n          <div *ngIf=\"username.errors.required\">Username is required</div>\r\n          <div *ngIf=\"username.errors.minlength\">\r\n            Username must be at least 3 characters\r\n          </div>\r\n          <div *ngIf=\"username.errors.maxlength\">\r\n            Username must be at most 20 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n          required email #email=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n          <div *ngIf=\"email.errors.required\">Email is required</div>\r\n          <div *ngIf=\"email.errors.email\">\r\n            Email must be a valid email address\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n          required minlength=\"6\" #password=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Password must be at least 6 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n      </div>\r\n\r\n      <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n        Signup failed!<br />{{ errorMessage }}\r\n      </div>\r\n    </form>\r\n\r\n    <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n      Your registration is successful!\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  closeResult = '';\r\n\r\n\r\n  constructor(private authService: AuthService) {\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password } = this.form;\r\n\r\n\r\n\r\n    this.authService.register(username, email, password, this.empList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}